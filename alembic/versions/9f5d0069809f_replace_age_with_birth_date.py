"""replace_age_with_birth_date

Revision ID: 9f5d0069809f
Revises: f087e9c3e3be
Create Date: 2025-10-08 12:54:48.076765

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9f5d0069809f'
down_revision: Union[str, None] = 'f087e9c3e3be'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Step 1: Add birth_date column as nullable
    op.add_column('user', sa.Column('birth_date', sa.Date(), nullable=True))
    
    # Step 2: Calculate birth_date from age for existing records
    # Assuming current year - age years = approximate birth year
    from datetime import datetime
    current_year = datetime.now().year
    op.execute(
        f"""
        UPDATE "user"
        SET birth_date = DATE '{current_year}-01-01' - (age * INTERVAL '1 year')
        WHERE birth_date IS NULL
        """
    )
    
    # Step 3: Make birth_date NOT NULL
    op.alter_column('user', 'birth_date', nullable=False)
    
    # Step 4: Drop age column
    op.drop_column('user', 'age')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Step 1: Add age column as nullable
    op.add_column('user', sa.Column('age', sa.Integer(), nullable=True))
    
    # Step 2: Calculate age from birth_date
    from datetime import datetime
    current_year = datetime.now().year
    op.execute(
        f"""
        UPDATE "user"
        SET age = {current_year} - EXTRACT(YEAR FROM birth_date)
        WHERE age IS NULL
        """
    )
    
    # Step 3: Make age NOT NULL
    op.alter_column('user', 'age', nullable=False)
    
    # Step 4: Drop birth_date column
    op.drop_column('user', 'birth_date')
    # ### end Alembic commands ###
